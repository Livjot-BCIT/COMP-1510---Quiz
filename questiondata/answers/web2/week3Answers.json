{
  "03_01": "Authentication is the process of verifying the identity of a user who is trying to access a system.",
  "03_02": "The 'bcrypt' module is commonly used in Node.js to securely hash user passwords.",
  "03_03": "The 'bcrypt.hash()' function hashes a password so that it can be safely stored in a database.",
  "03_04": "'bcrypt.compare()' compares a plaintext password with a hashed one to check if they match.",
  "03_05": "Environment variables (like in a .env file) are used to keep sensitive configuration information out of your source code.",
  "03_06": "The 'dotenv' package loads variables from a .env file into process.env in Node.js.",
  "03_07": "'express-session' is the standard middleware to manage user sessions in Express apps.",
  "03_08": "A session stores temporary user-specific data between requests, like login status or a shopping cart.",
  "03_09": "Authorization is the process of granting or denying access to certain resources after authentication.",
  "03_10": "Storing session secrets in a .env file (and not in source code) helps keep them secure.",
  "03_11": "'req.session' is the property that stores session data in an Express app.",
  "03_12": "'req.session.destroy()' removes all data for the current user session.",
  "03_13": "Setting 'HttpOnly' on cookies prevents client-side JavaScript from accessing them, improving security.",
  "03_14": "The 'Secure' flag ensures that cookies are only sent over HTTPS connections.",
  "03_15": "If passwords are not hashed, attackers who gain database access can see all user passwords in plain text.",
  "03_16": "Salting means adding random data to a password before hashing it, which protects against certain attacks.",
  "03_17": "Salting makes hash values unique, even if two users have the same password.",
  "03_18": "'cookie-parser' middleware is used in Express to parse cookies attached to client requests.",
  "03_19": "'req.isAuthenticated()' is a Passport.js method that checks if the user is currently logged in.",
  "03_20": "The 'passport' module supports various authentication strategies, such as local login or OAuth.",
  "03_21": "'serializeUser' in Passport.js determines how user data is stored in the session.",
  "03_22": "Checking that 'req.session' contains user data ensures a route is accessible only to logged-in users.",
  "03_23": "A CSRF token helps defend against cross-site request forgery attacks by validating the origin of requests.",
  "03_24": "Limiting login attempts helps prevent automated brute-force attacks against user accounts.",
  "03_25": "HTTPS encrypts data between the client and server, protecting it from eavesdropping.",
  "03_26": "Rotating session IDs after login helps prevent session fixation attacks.",
  "03_27": "'passport.authenticate()' checks user credentials using a chosen authentication strategy.",
  "03_28": "The 'secret' property in session middleware is used to sign the session ID cookie, ensuring its integrity.",
  "03_29": "The 'X-Frame-Options' HTTP header can prevent clickjacking by controlling whether a page can be embedded in a frame.",
  "03_30": "'maxAge' sets how long a session or cookie lasts before expiring."
}
