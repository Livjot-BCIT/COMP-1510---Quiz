{
  "05_01": "A method is a reusable block of code that performs a specific task. It groups statements together and can be called from other parts of the program, making code more organized and maintainable.",
  "05_02": "To define a method that returns an int, you need to specify the return type (int), method name, and use parentheses and curly braces. The example provided follows this syntax and returns an integer value.",
  "05_03": "The return statement ends a method's execution and sends a value back to the place where the method was called. Without it, a method can't return any data to its caller.",
  "05_04": "The 'this' keyword is used to call another method or access a field inside the same class. It's useful when you want to clarify you're referring to the current object's members.",
  "05_05": "Method overloading means having multiple methods with the same name but different parameter lists. This allows different types or numbers of arguments for the same general operation.",
  "05_06": "Overloaded methods have the same name but must differ in their parameter types or counts. Changing just the return type is not enough for overloading in Java.",
  "05_07": "The square method multiplies its argument by itself, so square(5) returns 25. The main method prints this result.",
  "05_08": "A static method is associated with the class itself, not any instance (object) of the class. You can call it without creating an object.",
  "05_09": "The method expects the first argument to be an int and the second a double. foo(5, 2.0) matches this signature exactly.",
  "05_10": "To return an array from a method, specify the array type (int[]) in the method signature and return a new array. The correct answer uses this syntax.",
  "05_11": "Scope defines where a variable can be accessed. A variable's scope is limited to the region of code where it's declared, such as inside a method or block.",
  "05_12": "In Java, primitive types (int, double, etc.) are passed by value, meaning the method receives a copy of the variable, not the original. Changes inside the method don't affect the original variable.",
  "05_13": "Because Java passes primitive arguments by value, the change(x) method does not modify the original x in main. The printed value remains 5.",
  "05_14": "A recursive method is one that calls itself (directly or indirectly). This is a common way to solve problems that can be broken into smaller subproblems.",
  "05_15": "The base case in recursion is the condition that stops the recursive calls. Without it, recursion would continue forever.",
  "05_16": "Recursion is demonstrated when a method (like factorial) calls itself. This is fundamental to recursive problem solving.",
  "05_17": "Without a base case, recursion never stops, eventually causing a stack overflow error because each call uses more memory.",
  "05_18": "A base case is a condition that prevents further recursive calls, allowing the recursion to eventually stop.",
  "05_19": "sum(3) returns 3 + sum(2), which is 3 + 2 + sum(1), which is 3 + 2 + 1 = 6. This is an example of a classic recursive sum.",
  "05_20": "A valid method declaration includes the access modifier, return type, method name, and parameter list, followed by curly braces. The given example fits this format.",
  "05_21": "The 'void' return type means the method does not return any value. It's used for methods that just perform actions.",
  "05_22": "The correct method declaration requires parentheses even if there are no parameters. Omitting them is a syntax error.",
  "05_23": "Method parameters are local to the method. They are created when the method is called and destroyed when it finishes.",
  "05_24": "To pass an array as an argument, declare the parameter as int[]. This allows the method to receive and work with arrays.",
  "05_25": "test expects two int arguments. test(1, 2) matches this signature and passes two ints as required.",
  "05_26": "Overloading means two methods have the same name but different parameter types or counts. This is allowed and useful for similar operations with different inputs.",
  "05_27": "A static method can be called using the class name. Using 'this' refers to the current object, not valid for static methods.",
  "05_28": "The stack stores information (like parameters and local variables) for each method call. In recursion, every new call adds a new frame to the stack.",
  "05_29": "If a method is declared to return int but has no return statement, the compiler will produce an error because it expects a value to be returned.",
  "05_30": "A method with no parameters must still include parentheses after its name in the declaration. The correct answer shows this.",
  "05_31": "Calling printHello() twice prints 'Hello ' two times in a row.",
  "05_32": "Local variables exist only within the method they are declared in and are not accessible from outside that method.",
  "05_33": "Static methods can be called without creating an object of the class. This is useful for utility methods or main().",
  "05_34": "fun(4) returns 4 + fun(2), which is 4 + 2 + fun(0). fun(0) returns 0, so the total is 4 + 2 + 0 = 6.",
  "05_35": "The method signature is made up of the method name and parameter list. The return type is not part of the signature in Java.",
  "05_36": "Using methods to duplicate code in many places is the opposite of their purpose. Methods help you avoid repeating code.",
  "05_37": "The return type specifies what kind of value (if any) the method returns. For void, it returns nothing.",
  "05_38": "A local variable inside a method cannot be accessed outside the method. It only exists during the method's execution.",
  "05_39": "When you pass an array to a method, the method can change its elements. So arr[0] is set to 10 and printed.",
  "05_40": "foo(3) returns 1 + foo(2), foo(2) returns 1 + foo(1), foo(1) returns 1 + foo(0), and foo(0) returns 0. Add up: 1+1+1+0 = 3.",
  "05_41": "A helper method is called by another method to perform a subtask. It helps break complex tasks into smaller parts.",
  "05_42": "A method header includes the access modifier, return type, name, and parameters (in parentheses), ending with no semicolon.",
  "05_43": "Methods allow you to reuse code and organize it into manageable sections, making code easier to read and maintain.",
  "05_44": "The void keyword in a method declaration means the method does not return a value to its caller.",
  "05_45": "The correct order for a method declaration is: access modifier, return type, method name, parameters, and then method body.",
  "05_46": "Valid Java method names start with a letter or underscore and follow Java naming rules. getValue and _processData are valid.",
  "05_47": "Recursion can always be rewritten as a loop, although sometimes recursion makes the logic clearer for certain problems.",
  "05_48": "A good method is short, focused on one task, and has a clear purpose. Trying to do too much makes code harder to maintain.",
  "05_49": "In Java, methods can't be overloaded by return type alone. Having the same name and parameters with different return types causes a compile error.",
  "05_50": "The 'super' keyword is used in a subclass to call a method defined in its superclass, especially when you want to extend or customize its behavior.",
  "05_51": "A do-while loop checks its condition after the loop body, so the statements inside always run at least once, regardless of whether the condition is true or false at the start.",
  "05_52": "The break statement will only exit the innermost loop in which it appears. It does not affect any surrounding or outer loops.",
  "05_53": "The loop starts with count = 1 and prints 1, 2, and 3, incrementing each time and stopping before count reaches 4. So the output is '1 2 3 '.",
  "05_54": "If you forget to increment (or otherwise update) the loop control variable in a while loop, the condition may never become false, so the loop could run forever (an infinite loop).",
  "05_55": "A for loop is designed for situations where you know the exact number of repetitions ahead of time. The initialization, condition, and update are all managed in one line."
}
