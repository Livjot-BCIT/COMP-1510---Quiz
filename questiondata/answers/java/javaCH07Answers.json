{
  "07_01": "An ArrayList is a data structure that acts like a resizable array. It is part of the Java Collections Framework and can grow or shrink in size as needed, unlike regular arrays which are fixed in length.",
  "07_02": "To use ArrayList in Java, you must import it from java.util. The correct import statement is 'import java.util.ArrayList;'.",
  "07_03": "You declare an ArrayList of Strings using generics: ArrayList<String> list = new ArrayList<>();. The angle brackets specify the type of objects it will store.",
  "07_04": "The add() method appends an element to the end of an ArrayList. Methods like insert(), append(), or push() do not exist for ArrayLists in Java.",
  "07_05": "The size() method returns the number of elements currently in an ArrayList. Arrays use .length, but ArrayLists use .size().",
  "07_06": "Trying to access an invalid index in an ArrayList (such as a negative number or one greater than size() - 1) causes Java to throw an IndexOutOfBoundsException.",
  "07_07": "Calling remove(2) on an ArrayList removes the element at index 2 (the third element, since indices start at 0).",
  "07_08": "The set(i, value) method replaces the element at index i with value. Other methods like replace, put, or update do not exist for ArrayLists.",
  "07_09": "Since ArrayLists are zero-indexed, names.get(2) retrieves the third element. Square brackets are not used for ArrayList access.",
  "07_10": "A major advantage of ArrayLists over arrays is their ability to resize themselves as you add or remove elements. Arrays have a fixed size after creation.",
  "07_11": "You must use the wrapper class Integer with ArrayList, not the primitive type int. The syntax ArrayList<Integer> nums = new ArrayList<>(); is correct.",
  "07_12": "ArrayLists can only store objects, so for primitives like int, you need to use the wrapper class (Integer) which allows objects to be stored in the collection.",
  "07_13": "Autoboxing is Java's automatic conversion of primitive types (like int) to their corresponding wrapper class objects (like Integer), and vice versa (unboxing). This allows you to use primitives in ArrayLists.",
  "07_14": "After adding two strings to words, calling words.size() returns 2 because there are two elements in the ArrayList.",
  "07_15": "nums.get(1) returns the value at index 1, which is 10 since the second value added was 10.",
  "07_16": "ArrayLists can only store objects, not primitive types. If you need to store ints or doubles, you must use their wrapper classes Integer or Double.",
  "07_17": "The clear() method removes all elements from an ArrayList, leaving it empty.",
  "07_18": "The enhanced for loop (for-each loop) is typically used to process every element in an ArrayList, making iteration simple and readable.",
  "07_19": "The contains() method returns true if the ArrayList contains the specified value, and false otherwise.",
  "07_20": "After removing an item from an ArrayList, all elements after that index shift left (their indices decrease by 1) to fill the gap.",
  "07_21": "You can use an enhanced for loop to iterate over each value in an ArrayList and print it: for (int n : nums) System.out.println(n);",
  "07_22": "To create an empty ArrayList of Doubles, use the syntax ArrayList<Double> dubs = new ArrayList<>();.",
  "07_23": "When you create a new ArrayList, it starts empty. Even if you specify an initial capacity, you must add values yourself.",
  "07_24": "ArrayLists only store objects, while arrays can store both primitives and objects. This is a key difference between them.",
  "07_25": "To replace a value at a specific index in an ArrayList, use the set(index, value) method.",
  "07_26": "Calling nums.remove(Integer.valueOf(10)) removes the first occurrence of the value 10 (not the element at index 10) from the ArrayList.",
  "07_27": "ArrayLists use the get() method (not square brackets) to access elements, so you cannot use arr[0] like with arrays.",
  "07_28": "The indexOf() method returns the index of the first occurrence of the specified value in the ArrayList, or -1 if not found.",
  "07_29": "Unboxing is when Java automatically converts a wrapper class object (like Integer) to its corresponding primitive type (like int) as needed.",
  "07_30": "list.add(0, \"hello\") inserts \"hello\" at index 0, shifting all existing elements to the right.",
  "07_31": "The isEmpty() method checks if an ArrayList contains no elements and returns true if it is empty.",
  "07_32": "list.get(list.size() - 1) gives you the last element in the ArrayList, since indices start at 0.",
  "07_33": "ArrayLists do not use square brackets for access (they use get() and set()), so that statement is FALSE. The others are true.",
  "07_34": "When removing items while iterating, use a standard for loop and iterate backward to avoid skipping elements or causing errors. Removing while iterating forward or in an enhanced for loop causes issues.",
  "07_35": "ArrayLists are useful for managing lists that change size, as they can grow or shrink as needed and provide helpful methods for adding and removing items.",
  "07_36": "The indexOf() method returns the index of the first occurrence of the given value or -1 if the value is not in the ArrayList.",
  "07_37": "If you add more elements than the initial capacity, the ArrayList automatically resizes to accommodate them. You do not need to worry about running out of space.",
  "07_38": "Calling list.remove(0) removes and returns the first element (\"a\") from the ArrayList.",
  "07_39": "Trying to access an array index outside its valid range in Java throws an ArrayIndexOutOfBoundsException. This is a runtime error designed to prevent accidental access to memory outside the array, which helps protect your program from unpredictable bugs.",
  "07_40": "The 'size()' method of ArrayList returns the number of elements currently stored in the list. Methods like 'length()' and 'count()' do not exist for ArrayList.",
  "07_41": "When you create an int array in Java, each element is automatically initialized to zero by default if not given a value. This is part of Java's memory management for primitive arrays.",
  "07_42": "The enhanced for loop (also called the for-each loop) can be used to read each element in an array or ArrayList, but it cannot change the size of the array or collection. It's useful for reading data, not modifying structure.",
  "07_43": "The correct way to declare a two-dimensional integer array with 3 rows and 4 columns is 'int[][] arr = new int[3][4];'. The first number is the number of rows, the second is the number of columns."
}
