{
  "08_01": "CRUD stands for Create, Read, Update, Delete, these are the four basic operations you can perform on persistent data in web development.",
  "08_02": "POST is the HTTP method used to create new resources, like adding a new user or record.",
  "08_03": "GET is used to retrieve data from the server, such as displaying a list of users or a single record.",
  "08_04": "PUT is typically used to update an existing resource, replacing its current representation with the new data sent in the request.",
  "08_05": "DELETE is used to remove a resource from the server, such as deleting a user or record.",
  "08_06": "Sessions allow web apps to remember users and keep them logged in across multiple HTTP requests, which are stateless by default.",
  "08_07": "The express-session middleware helps manage session data on the server for each user in an Express app.",
  "08_08": "By default, express-session stores session data in server memory (RAM), which is suitable for development but not for production.",
  "08_09": "In Express, req.session is the property that holds the session data for the current user.",
  "08_10": "req.session.destroy() properly destroys a session and logs the user out in Express.",
  "08_11": "201 is the HTTP status code for successful resource creation (e.g., after POSTing new data).",
  "08_12": "find() retrieves all documents from a database collection, such as all users from a 'users' collection.",
  "08_13": "insertOne() adds a new document to a collection in databases like MongoDB.",
  "08_14": "updateOne() is used to modify an existing document in a collection, changing its data.",
  "08_15": "deleteOne() removes a single document from a collection in MongoDB.",
  "08_16": "req.body contains the data sent by the client in a POST request, such as form fields or JSON.",
  "08_17": "A common way to check if a user is authenticated is by checking a property (like loggedIn or userId) on req.session.",
  "08_18": "bcrypt.hash() is a secure way to hash user passwords before storing them in the database.",
  "08_19": "express.json() is middleware for parsing incoming JSON data in Express request bodies.",
  "08_20": "req.params.id accesses the route parameter (like /user/:id) from the URL in Express.",
  "08_21": "MongoDB is often used to persist session data in production, making it scalable and reliable across servers.",
  "08_22": "JWT authentication is stateless, which means you don't need to store session data on the server. This helps with scalability.",
  "08_23": "res.cookie('name', 'value') sends a cookie from the server to the client in Express.",
  "08_24": "204 means 'No Content,' which is returned when a request was successful but there's nothing to send back.",
  "08_25": "req.session.userId is a common place to store the logged-in user's ID in a session.",
  "08_26": "Flash messages provide short-lived feedback to users (e.g., login errors or success) and disappear after being shown once.",
  "08_27": "Setting the HttpOnly and Secure flags on cookies makes them safer by preventing access from JavaScript and requiring HTTPS.",
  "08_28": "express.urlencoded() parses URL-encoded data from forms, making it available as req.body in Express.",
  "08_29": "A 404 handler in Express is added as the last middleware, catching all unmatched routes.",
  "08_30": "A soft delete marks a record as deleted (e.g., with a flag), but keeps it in the database for possible recovery or auditing."
}
