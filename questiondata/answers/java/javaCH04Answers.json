{
  "04_01": "The loop variable x starts at 3 and the condition (x > 0) is true for x = 3, 2, and 1. Each time, x is decremented, so the loop body executes 3 times.",
  "04_02": "If the loop condition never becomes false (like while(true)), the loop repeats forever, causing an infinite loop.",
  "04_03": "The loop starts at 0 and adds 2 each time, printing 0, 2, and 4 before i becomes 5. So the output is '0 2 4 '.",
  "04_04": "The for-each syntax in Java is: for (int x : arr) { sum += x; } This correctly adds every value in arr to sum.",
  "04_05": "A nested loop means a loop inside the body of another loop. This is useful for things like 2D arrays or patterns.",
  "04_06": "For i = 1 to 2, and j = 1 to 2, the printed values are i+j: 2,3,3,4 in order.",
  "04_07": "n=2 triggers 'case 2', printing B, but there is no break, so 'default' is also executed, printing C. Output is 'BC'.",
  "04_08": "Using '=' in a boolean condition is an assignment, not a comparison, and causes a syntax error. Use '==' for comparison.",
  "04_09": "A for-each loop iterates over every element in an array or collection, regardless of index.",
  "04_10": "The code skips even numbers using 'continue', so it prints only odd numbers between 1 and 10.",
  "04_11": "x is never incremented in the loop, so the condition x < 5 is always true and results in an infinite loop.",
  "04_12": "The '==' operator compares whether two String references point to the same object, while .equals() checks the actual sequence of characters.",
  "04_13": "A do-while loop always executes the body at least once, so the output is 1 2 3.",
  "04_14": "This for loop prints 'Java is fun' five times because i goes from 0 to 4.",
  "04_15": "break immediately exits the entire loop, while continue skips the rest of the loop body and goes to the next iteration.",
  "04_16": "The expression evaluates as (true && false) is false, then false || true is true.",
  "04_17": "By De Morgan's law, !(a || b) is equivalent to !a && !b.",
  "04_18": "i takes values 0 and 2 before becoming 4, so the loop executes twice.",
  "04_19": "A NullPointerException is thrown when you try to call a method or access a field on a null reference.",
  "04_20": "The loop adds 2, 4, 6, and 8 to count, resulting in a sum of 20.",
  "04_21": "The default case in a switch statement handles situations where none of the explicit cases match.",
  "04_22": "This is the correct way to declare and allocate an array of 5 integers in Java.",
  "04_23": "The string 'Hello' has 5 characters, so s.length() returns 5.",
  "04_24": ".equals() compares the contents of two strings, while == checks reference equality.",
  "04_25": "Adding instead of subtracting is a logic error; code compiles and runs but produces the wrong result.",
  "04_26": "Array indices in Java start at 0, so the last element of a 6-element array is at index 5.",
  "04_27": "Accessing arr[6] in an array of length 6 is out of bounds and throws an exception.",
  "04_28": "The enhanced for loop can iterate over both arrays and ArrayLists.",
  "04_29": "A do-while loop always executes its body at least once, even if the condition is false initially.",
  "04_30": "i takes values 0, 3, and 6 (all < 10), so the loop prints 'hi' three times.",
  "04_31": "This is the standard way to swap elements to reverse an array in place.",
  "04_32": "A for loop's initialization section runs once before the loop body is ever executed.",
  "04_33": "sum += i as i goes from 0 to 3: sum = 0+0+1+2+3 = 6.",
  "04_34": "If x > 0, then x cannot be zero, so x != 0 is always true.",
  "04_35": "In Java, * (multiplication) has higher precedence than addition, equality, or logical operators.",
  "04_36": "A nested for loop is a for loop inside the body of another for loop.",
  "04_37": "Using '=' instead of '==' in an if condition is a syntax error in Java.",
  "04_38": "break will immediately exit the loop, even if the condition is still true.",
  "04_39": "x < y is true (4 < 6), y > 2 is also true, so the whole expression is true.",
  "04_40": "A do-while loop always runs at least once, even if the condition is false on the first check.",
  "04_41": "If none of the case labels match, the default case executes, handling all other possible values.",
  "04_42": "int[] arr = new int[5]; declares an array of 5 integers; the other forms are not valid Java syntax.",
  "04_43": "The length() method on 'Hello' returns 5, which is the number of characters in the string.",
  "04_44": ".equals() compares the contents of two String objects, which is the correct way to test equality.",
  "04_45": "Adding instead of subtracting is a logical error because it produces incorrect output but does not stop the code from compiling or running.",
  "04_46": "Array indices in Java start at 0, so for an array of length 6, the last valid index is 5.",
  "04_47": "arr[6] is out of bounds for an array with indices 0-5 and will throw an ArrayIndexOutOfBoundsException.",
  "04_48": "You can use the enhanced for (for-each) loop to iterate over both arrays and ArrayLists.",
  "04_49": "A do-while loop always runs its body once before checking the condition, which is different from a while loop.",
  "04_50": "i starts at 0 and increases by 3 each time: i = 0, 3, 6, 9 (four times). But i < 10 is only true for 0, 3, 6, so it actually prints three times: 'hi' for 0, 3, 6.",
  "04_51": "Swapping elements at positions i and arr.length-1-i from the ends towards the center will reverse the array in place.",
  "04_52": "The initialization section of a for loop runs once, before the loop starts.",
  "04_53": "i goes from 0 to 3; sum = 0 + 0 + 1 + 2 + 3 = 6.",
  "04_54": "If x > 0, then x is always not equal to 0.",
  "04_55": "In Java, multiplication (*) has higher precedence than addition (+), equality (==), or logical AND (&&).",
  "04_56": "A for loop inside another for loop (with two counters) is a nested for loop.",
  "04_57": "Using '=' (assignment) in an if condition is a syntax error because Java expects a boolean expression.",
  "04_58": "The break statement immediately stops the loop and continues with the next statement after the loop.",
  "04_59": "If x=4, y=6: x < y is true and y > 2 is true; so (x < y && y > 2) is true.",
  "04_60": "A do-while loop always executes the loop body at least once, regardless of the condition.",
  "04_61": "The loop prints 0, then since i == 1 after increment, break exits the loop before any further printing.",
  "04_62": "while(true) and while(1 == 1) both always evaluate to true, resulting in infinite loops.",
  "04_63": "i starts at 10, then 6, then 2 (each time subtracting 4), and the loop stops when i becomes negative.",
  "04_64": "Only 2 and 6 are added to sum; when val is 4, continue skips that addition.",
  "04_65": "Using '=' in if(x = 5) is a syntax error; it should be '==' for comparison.",
  "04_66": "A for loop can be inside a while loop (nesting), and a do-while loop always runs at least once.",
  "04_67": "&& (logical AND) and || (logical OR) combine multiple conditions in an if statement.",
  "04_68": "i starts at 1, increments to 2, continue skips printing for i==3, then prints 2 and 4.",
  "04_69": "Using continue skips printing 5, so numbers 1-10 except 5 are printed.",
  "04_70": "arr[5] and arr[arr.length] are out of bounds for an array of length 5 (indices 0-4), causing an exception."
}
