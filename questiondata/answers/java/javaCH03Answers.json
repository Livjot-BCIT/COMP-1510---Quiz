{
  "03_01": "The 'new String(\"Hello\")' syntax explicitly calls the String constructor, creating a new String object. The other options are invalid Java syntax for constructing a String.",
  "03_02": "Both 'new Integer(5)' and 'Integer.valueOf(5)' correctly create Integer objects by either calling the constructor or using a static factory method. The other options are invalid syntax in Java.",
  "03_03": "Math.random() generates a random double value between 0.0 (inclusive) and 1.0 (exclusive), which is commonly used for random number generation in Java.",
  "03_04": "Integer, Character, and Double are wrapper classes that allow you to use primitives as objects and call methods on them. String is not a wrapper class but a built-in reference type.",
  "03_05": "The 'new' operator creates new objects and allocates memory for them. It is not used for declaring variables or importing classes.",
  "03_06": "The 'length()' method is a member of the String class, used to return the number of characters in a String object.",
  "03_07": "The Math class provides static methods for mathematical operations. Math.abs() and Math.PI are commonly used, and Math methods do not require creating a Math object.",
  "03_08": "The 'toUpperCase()' method returns a new String in which all characters are uppercase. The original String is not changed because Strings are immutable.",
  "03_09": "Math.floor(4.8) returns 4.0 by rounding down to the nearest integer. Casting to int removes the decimal part, so x becomes 4.",
  "03_10": "String objects cannot be modified after creation, which is what 'immutable' means. Any method that appears to change a String actually returns a new String object.",
  "03_11": "'Java' contains four characters, so 's.length()' returns 4.",
  "03_12": "You must use 'new Scanner(System.in)' to read input from the console, and Scanner requires importing 'java.util.Scanner'.",
  "03_13": "'parseInt()' is a method of the Integer class, not String. The other methods are valid String methods.",
  "03_14": "A wrapper class wraps a primitive type value as an object, which allows you to use primitives in places where objects are required.",
  "03_15": "Autoboxing automatically converts a primitive value, like int, to its wrapper class object, like Integer, so they can be used interchangeably in some contexts.",
  "03_16": "'Integer.parseInt(s)' converts a String representing a number to an int. The other options are not valid methods for this purpose.",
  "03_17": "Immutable means that once a String object is created, its value cannot be changed. Any modification creates a new String object.",
  "03_18": "'s.charAt(4)' on 'Java' will cause an error because String indices start at 0 and 'Java' only has indices 0-3.",
  "03_19": "The equals() method checks if two Strings have the same sequence of characters, not whether they refer to the same memory location.",
  "03_20": "Integer objects with small values are cached in Java, so 'x == y' is true when both are 5, as they point to the same cached object.",
  "03_21": "Scanner reads input from various sources (including System.in) and can parse it into different types. You must import java.util.Scanner to use it.",
  "03_22": "A class defines the structure, while an object is a specific instance created based on that blueprint.",
  "03_23": "'Rectangle box;' declares a reference variable for a Rectangle object. The other statements are not valid Java syntax.",
  "03_24": "An object reference stores the memory address of an object, and you can copy or assign references, allowing multiple variables to refer to the same object.",
  "03_25": "If no references point to an object, it cannot be accessed and becomes eligible for garbage collection.",
  "03_26": "(int)(Math.random() * 10) produces an int between 0 and 9 by scaling the double result and casting to int.",
  "03_27": "abs(), round(), and random() are all static methods in Math. toUpperCase() is not part of Math, but String.",
  "03_28": "The dot operator accesses an object's methods and fields (e.g., object.method()).",
  "03_29": "You call a method on an object with 'objectName.methodName(arguments);', so 'box.setWidth(10);' is correct.",
  "03_30": "A constructor initializes a new object's state when it's created. It is called automatically when using 'new'.",
  "03_31": "You can create a String with either the literal syntax or the constructor; both 'A' and 'B' are valid.",
  "03_32": "When you reassign s1, s2 still refers to the original String 'abc', as Strings are immutable and assignments copy the reference.",
  "03_33": "Integer.parseInt(\"42\") parses the String and returns the int value 42. It does not return a String or a double.",
  "03_34": "Multiplying Math.random() by 10 and adding 1 shifts the range from [0,1) to [1,11), so casting to int gives 1-10 inclusive.",
  "03_35": "The substring(1,4) call returns the substring from index 1 up to (but not including) index 4, which is 'ell'.",
  "03_36": "Wrapper classes like Integer and Double allow primitive values to be used as objects and support utility methods.",
  "03_37": "equals() checks whether the character sequences in the two Strings are identical, not whether their references are equal.",
  "03_38": "Scanner can read input from the console or from files, and it can parse input into int or double values. It does not convert integers to Strings.",
  "03_39": "An uninitialized reference variable points to null by default, not an empty string or 0.",
  "03_40": "Accessing a null reference throws a NullPointerException at runtime, because there is no actual object to operate on.",
  "03_41": "The compareTo() method compares two Strings lexicographically and returns an int indicating their order.",
  "03_42": "s.charAt(2) accesses the third character in the String, which is 'v' in 'Java'.",
  "03_43": "nextLine() reads the entire next line of input (up to the newline character), which is useful for reading full sentences.",
  "03_44": "Unboxing is the process by which a wrapper object is converted back to its corresponding primitive value automatically.",
  "03_45": "String, Integer, and Double objects cannot be changed once created (they are immutable). StringBuilder is mutable.",
  "03_46": "nextInt() reads and returns the next int value entered in the input stream.",
  "03_47": "Method overloading allows you to define multiple methods with the same name but different parameters, enabling different behaviors.",
  "03_48": "You can create a Double object using 'new Double(3.14)' or by using 'Double.valueOf(\"3.14\")', which parses the string.",
  "03_49": "indexOf('a') returns the index of the first occurrence of 'a' in 'Banana', which is 1.",
  "03_50": "You must use '.equals()' to compare the values of two Integer objects, since '==' only checks if the references are the same.",
  "03_51": "'Java'.substring(1,3) extracts the substring from index 1 to 2, giving 'av'.",
  "03_52": "Primitive types are not objects and are stored directly in memory. They cannot be used as generic arguments in collections.",
  "03_53": "sqrt(), pow(), and random() are all static methods of the Math class. toString() is not a Math method.",
  "03_54": "Casting a double to int truncates the decimal part, so (int) 4.5 results in 4.",
  "03_55": "Double.parseDouble(s) converts a String containing a numeric value into a double.",
  "03_56": "The keyword null is used for reference variables to indicate that they do not point to any object.",
  "03_57": "The 'new' operator allocates memory for the object on the heap. The constructor initializes the new object.",
  "03_58": "Reference variables in Java store addresses of objects and can refer to objects of their declared type. They can also be null.",
  "03_59": "The '.length' field (not a method) gives the length of an array in Java.",
  "03_60": "Wrapper classes are used to store primitives in collections, enable method utilities for parsing, and allow autoboxing/unboxing.",
   "03_61": "Java variable names can begin with a letter, underscore, or dollar sign and cannot be reserved words. 'Ï€Value' and '_privateVar' are valid; '1stName' starts with a digit (invalid) and 'void' is a reserved keyword.",
  "03_62": "Using a variable outside its declared scope will result in a compile-time error because the variable is not accessible or defined in that region of code.",
  "03_63": "When you divide an int by a double, the int is promoted to double and normal floating-point division occurs, so 7 divided by 2.0 gives 3.5.",
  "03_64": "The correct way to get the length of a String in Java is to call the length() method on the string object (e.g., message.length()).",
  "03_65": "Named constants make code clearer and easier to update. If a value is used in many places, you only need to change it in one spot, which reduces mistakes and improves readability."
}
