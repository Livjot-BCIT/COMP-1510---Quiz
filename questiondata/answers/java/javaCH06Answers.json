{
  "06_01": "An array in Java is a fixed-size, ordered collection of elements, all of which must be the same data type. They are stored in adjacent memory locations, allowing for fast access by index.",
  "06_02": "The syntax 'int[] numbers = new int[5];' creates an array variable named numbers that holds 5 integers, all initialized to 0 by default.",
  "06_03": "Array indices in Java start at 0, so for an array of length 10, the valid indices are 0 through 9 (inclusive).",
  "06_04": "Array indices are zero-based, so the third element is at index 2. Accessing data[2] returns the third item in the array.",
  "06_05": "When an int array is created, all its elements are initialized to 0 by default unless specified otherwise.",
  "06_06": "Arrays in Java have a length property (not a method), so you use nums.length to get the size of the array.",
  "06_07": "Accessing an index outside of the array's bounds (too high or negative) throws an ArrayIndexOutOfBoundsException at runtime.",
  "06_08": "The for loop is the most common and direct way to process each element of an array sequentially in Java.",
  "06_09": "You can directly initialize an array with values using curly braces: double[] arr = {1.1, 2.2, 3.3};.",
  "06_10": "The .length property of an array gives the number of elements in the array. Here, a.length is 3 because there are three elements.",
  "06_11": "Arrays are objects and can be passed as arguments to methods, just like any other variable or object reference.",
  "06_12": "When passing an array to a method, Java passes a reference (memory address) to the actual array object, not a copy of its contents.",
  "06_13": "Assigning nums[1] = 10 changes the second element of the array to 10. The print statement outputs this new value.",
  "06_14": "System.arraycopy is the standard way to copy one array's contents to another, element by element, if the arrays are the same length.",
  "06_15": "The default value for int elements in a new array is 0, so printing x[2] prints 0 unless it's been assigned another value.",
  "06_16": "To find the largest element, you must iterate through the array, comparing each value to track the maximum. Java does not provide a built-in max method for arrays.",
  "06_17": "The last element of an array is always at index arr.length - 1 due to zero-based indexing.",
  "06_18": "To declare a two-dimensional int array with 4 rows and 3 columns, use int[][] matrix = new int[4][3];. This creates an array with 4 subarrays of length 3 each.",
  "06_19": "Elements of an array of reference types (like String) are initialized to null until explicitly assigned a value.",
  "06_20": "Arrays in Java are fixed-size after creation and cannot be dynamically resized. They are objects and are indexed starting from 0.",
  "06_21": "An enhanced for loop (for-each) is designed to iterate over each element in an array simply and clearly.",
  "06_22": "To initialize all elements to true, use curly braces and list 'true' for each value: boolean[] arr = {true, true, true, true, true};.",
  "06_23": "The .length property of a double array created as new double[4] will be 4.",
  "06_24": "The for-each loop iterates over each element in arr, printing them in order: 5 6 7.",
  "06_25": "int[5] arr; is not valid syntax in Java. Arrays are declared with type[] variableName;.",
  "06_26": "The only way to fill an existing array with a value is to use a for loop to assign the value to each index.",
  "06_27": "Summing an array's elements requires a for loop that adds each element to a running total, as shown.",
  "06_28": "int[] arr = new int[3]; arr[0] = 100; creates an array of 3 ints and sets the first element to 100.",
  "06_29": "arr[1] is 8 and arr[2] is 9, so their sum is 17.",
  "06_30": "You can assign values to a String array at declaration using curly braces: String[] s = {\"a\", \"b\", \"c\"};.",
  "06_31": "The enhanced for loop assigns each element of arr to the variable x in turn, so you can process every item easily.",
  "06_32": "When you create a new double array of size 10, all elements are automatically set to 0.0.",
  "06_33": "Printing an array reference directly shows a hashcode (like [I@1a2b3c), not the contents of the array.",
  "06_34": "Once an array is created, its length is fixed for its lifetime; you cannot change its size.",
  "06_35": "To reverse an array, you swap elements from both ends toward the center using a loop. There's no built-in reverse method for arrays in Java.",
  "06_36": "You can iterate through an array using a traditional for loop (with an index) or an enhanced for loop (for-each). foreach (int x in arr) is not valid in Java.",
  "06_37": "A ragged (non-rectangular) 2D array is created by specifying only the number of rows: int[][] arr = new int[3][];, then initializing each row separately.",
  "06_38": "You need nested loops to print every element in a 2D array: one for each row, one for each column.",
  "06_39": "int arr[3]; is not valid Java syntax. You must use type[] variableName or variableName[] syntax.",
  "06_40": "Assigning arr2 = arr1 makes arr2 refer to the exact same array object in memory. Changes via arr2 will affect arr1 and vice versa.",
  "06_41": "Method overloading means defining multiple methods with the same name in a class, but with different parameter lists (different number or type of parameters). Method overriding, on the other hand, is when a subclass provides its own implementation for a method that is already defined in its superclass. Overriding must have the same method signature, while overloading only requires different parameter lists.",
  "06_42": "The 'public' access modifier allows class members to be accessible from any other class, regardless of the package. This is in contrast to private, protected, or default (package-private) visibility, which limit access.",
  "06_43": "The 'this' keyword is used within an instance method or constructor to refer to the current object. It's useful for distinguishing between instance variables and parameters with the same name, or to call other constructors in the same class.",
  "06_44": "Constructor chaining is when one constructor calls another constructor in the same class using 'this(...)'. This technique helps to avoid code duplication and keep initialization consistent.",
  "06_45": "Declaring a method as 'final' means that it cannot be overridden in any subclass. This is useful when you want to prevent changes to a method's behavior in child classes."
}
