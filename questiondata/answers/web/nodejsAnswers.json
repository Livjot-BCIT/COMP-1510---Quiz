{
  "07_01": "Node.js is a runtime environment that lets you run JavaScript outside the browser, built on the fast Chrome V8 JavaScript engine.",
  "07_02": "The require() function loads built-in or external modules so you can use their functionality in your Node.js files.",
  "07_03": "npm init creates a new package.json file, which is the configuration file for a Node.js project.",
  "07_04": "The fs module stands for 'file system' and allows you to read, write, and manage files in Node.js.",
  "07_05": "Node.js uses an event-driven, non-blocking I/O model, making it fast and efficient for handling multiple connections.",
  "07_06": "npm stands for Node Package Manager and is used to install and manage packages (libraries) for Node.js projects.",
  "07_07": "module.exports lets you share functions or objects from one file so they can be required in other files.",
  "07_08": "__dirname is a global variable that holds the directory path of the current JavaScript file.",
  "07_09": "fs.readFile() is an asynchronous method for reading files, so it doesn't block the rest of your code.",
  "07_10": "Node.js callbacks usually follow the error-first pattern, where the first argument is an error object (if any), which you should check.",
  "07_11": "http.createServer() is the built-in way to create a basic HTTP web server in Node.js.",
  "07_12": "The path module helps you handle and work with file and directory paths in a cross-platform way.",
  "07_13": "package.json is the default manifest file for Node.js projects, listing dependencies and project info.",
  "07_14": "npm install -g package installs a package globally so it can be used in any project or from the command line.",
  "07_15": "The path module provides utilities for working with file and directory paths.",
  "07_16": "module.exports defines what a file exports, so other files can import and use its functions or data.",
  "07_17": "The process object gives information about and control over the current Node.js process, like environment and arguments.",
  "07_18": "require('./utils') loads the utils.js file from the current directory as a module.",
  "07_19": "require('http').createServer() creates an HTTP server using Node's built-in http module.",
  "07_20": "fs.readFile() reads a file asynchronously, which is the recommended way to avoid blocking the event loop.",
  "07_21": "app.use() registers middleware, which are functions that process requests before they reach your route handlers.",
  "07_22": "req.params gives you access to dynamic route parameters (e.g. '/user/:id' â†’ req.params.id).",
  "07_23": "Port 3000 is the default for many Express apps if no environment variable or other port is specified.",
  "07_24": "res.json() sends a JSON-formatted response to the client, automatically stringifying objects.",
  "07_25": "req.query contains the parsed query string data (e.g. '?search=term') from the URL.",
  "07_26": "app.use(express.static('public')) makes the files in the public folder available as static assets.",
  "07_27": "Middleware in Express is any function that runs before the request reaches your final route handler.",
  "07_28": "The status code 201 means 'Created', commonly used after a successful POST request that adds data.",
  "07_29": "req.body contains data sent by the client in the body of a POST or PUT request (often JSON or form data).",
  "07_30": "Express recognizes error-handling middleware by its four arguments: (err, req, res, next).",
  "07_31": "server.close() shuts down a running HTTP server in Node.js.",
  "07_32": "npm init launches a step-by-step tool for creating a package.json file and setting up a Node project.",
  "07_33": "npm install express downloads and adds the express package to your project's dependencies.",
  "07_34": "app.post('/login', handler) defines a route that responds to POST requests at the /login URL.",
  "07_35": "os is a built-in module for getting operating system info; the others are not built-in to Node.js.",
  "07_36": "process.env is an object holding your environment variables (like API keys or ports) in Node.js.",
  "07_37": "npm start runs the 'start' script from package.json, usually launching your app.",
  "07_38": "nodemon app.js runs your app and automatically restarts it whenever you save your files.",
  "07_39": "res.render() renders a view template (like EJS, Pug, etc.) with the given data.",
  "07_40": "res.set() lets you set custom HTTP headers before sending a response.",
  "07_41": "Calling next() in middleware hands off processing to the next middleware or route handler.",
  "07_42": "process.exit() stops the current Node.js process immediately, ending your script.",
  "07_43": "Node's event loop lets it handle many tasks asynchronously, so it can serve many users at once.",
  "07_44": "document is only available in browsers; it's not a Node.js global object.",
  "07_45": "const fs = require('fs'); is the correct way to import the file system (fs) module in Node.js.",
  "07_46": "fs.unlink() deletes a file asynchronously, meaning Node can keep running while it works.",
  "07_47": "Express is a popular web framework for Node.js, used to build web servers and APIs easily."
}
