{
  "02_01": "A program is a set of instructions that a computer's hardware executes in sequence. This definition distinguishes a program from just rules, data, or language itself.",
  "02_02": "Software includes both the program and the data it uses. It's more than just code or hardware; it also includes the information the code operates on.",
  "02_03": "The print method keeps printing on the same line, while println adds a line break after output. That's why print does not advance to the next line.",
  "02_04": "In Java, you use System.out.println with parentheses and double quotes to print text and move to the next line. Using 'hello world' in single quotes is technically a syntax error, but your correct answer follows the method signature.",
  "02_05": "The + operator joins strings together, so it's called the string concatenation operator. It doesn't perform math in this context, only combines text.",
  "02_06": "When you add an int to a string using +, Java automatically converts the int to a string before joining them together. The result is always a single string.",
  "02_07": "In Java, you cannot split a string literal over two lines in your code; strings must be contained on one line unless you use concatenation.",
  "02_08": "The + operator acts as concatenation if either operand is a string, but does addition if both operands are numbers. So, its behavior depends on the types involved.",
  "02_09": "A variable is simply a name for a location in memory that stores a value. This allows the program to keep track of information as it runs.",
  "02_10": "A variable declaration tells Java both what the variable is called and what type of data it can hold. Both are required for proper usage.",
  "02_11": "The 'char' primitive type is used for characters. The other types represent numbers, booleans, or objects like strings.",
  "02_12": "The 'boolean' type in Java represents values that are either true or false. No other primitive type does this.",
  "02_13": "A long literal in Java must end with 'L' or 'l' so the compiler knows to treat it as a long instead of an int.",
  "02_14": "Whole numbers written without a decimal point or suffix are assumed to be type int, unless otherwise specified.",
  "02_15": "Hexadecimal numbers start with '0x' or '0X' in Java. This signals to the compiler that the value is in base 16.",
  "02_16": "Binary numbers are indicated with '0b' or '0B' at the start in Java. This tells the compiler the number is base 2.",
  "02_17": "Floating point numbers can use scientific notation by including an E or e, which separates the base value from its exponent (like 1.5e2 for 150).",
  "02_18": "You can use underscores in Java numbers for readability (like 1_000_000). Other characters such as commas or spaces are not allowed.",
  "02_19": "A character literal in Java must be enclosed in single quotes, distinguishing it from string literals, which use double quotes.",
  "02_20": "Java uses Unicode for the char type, so a char variable can represent any character in the Unicode set, not just ASCII.",
  "02_21": "An expression is any valid combination of values, variables, and operators that results in a value. This is how you compute results in code.",
  "02_22": "If either operand is a floating point type, the result of an arithmetic expression will also be a floating point value. This avoids losing decimal information.",
  "02_23": "If both operands in division are integers, Java drops the decimal part and returns only the integer result. Decimal parts are lost.",
  "02_24": "The % operator gives the remainder after division. For example, 7 % 3 is 1.",
  "02_25": "When using the % operator, the result takes the sign of the first operand (the dividend), not the second.",
  "02_26": "Java follows a specific order for arithmetic operations: parentheses first, then multiplication/division/remainder, then addition/subtraction, then assignment last.",
  "02_27": "Both 'count++' and 'count = count + 1;' increase count by 1. They are just two different ways to do the same thing.",
  "02_28": "'++count' increases the value before it is used in an expression; 'count++' increases it after. This affects how the value appears during calculations.",
  "02_29": "The assignment operators +=, -=, *=, /=, %= let you update a variable by performing an operation and assignment in one step.",
  "02_30": "An assignment statement changes the value stored in a variable. It overwrites the old value with a new one.",
  "02_31": "Initialization is the act of assigning an initial value to a variable when it is first declared.",
  "02_32": "The int type is for whole numbersâ€”numbers without a fractional part, such as 5 or -3.",
  "02_33": "An expression is a mix of operators and operands that Java evaluates to produce a result, like 2 + 3.",
  "02_34": "To read an entire line of input from the user in Java, you use Scanner.nextLine(). Other options either print output or don't work for this task.",
  "02_35": "A float literal in Java must end with 'F' or 'f', so the compiler knows it's a float, not a double.",
  "02_36": "Single quotes are used for characters (char), while double quotes are for strings. Using the wrong one results in an error.",
  "02_37": "The boolean type in Java can only store true or false, making it ideal for representing logical states.",
  "02_38": "Floating point numbers are represented using the float or double types, depending on the desired precision.",
  "02_39": "If an arithmetic operation involves a float or double, the result will be a float or double, ensuring accuracy with decimals.",
  "02_40": "You declare a constant in Java by marking it with the final keyword and assigning a value upon declaration.",
  "02_41": "An uninitialized int variable has a default value of 0. This helps prevent the use of undefined values in calculations.",
  "02_42": "Characters are represented by the char primitive type in Java, not string or other types.",
  "02_43": "If an arithmetic expression includes a floating point number, the result will also be floating point to avoid losing information.",
  "02_44": "When both operands are integers, the result is also an integer. Any fractional result is discarded.",
  "02_45": "The % operator is used for modulus (remainder) operations in Java, such as 9 % 4 which equals 1.",
  "02_46": "Java uses parentheses first, then multiplication/division, then addition/subtraction, then assignment. This ensures calculations are performed correctly.",
  "02_47": "'++count' increments before the value is used; 'count++' increments after. This can affect expressions that use the variable.",
  "02_48": "The boolean type stores true or false values. Other types are for numbers or characters.",
  "02_49": "Scanner is the class used to read input from the keyboard. You create a Scanner object and call its methods to get user input.",
  "02_50": "The / operator divides one value by another. Other operators perform different arithmetic functions.",
  "02_51": "int in Java can represent both positive and negative numbers, as it is a signed type.",
  "02_52": "A constant is created using the final keyword followed by a value, like final int x = 10;.",
  "02_53": "Dividing two integers with / results in an integer. Any fractional part is removed (truncated).",
  "02_54": "A boolean variable defaults to false if not initialized, so it's never accidentally true.",
  "02_55": "Floating point numbers can store decimals, making them suitable for precise or fractional values.",
  "02_56": "The / operator gives the quotient when dividing numbers. It's the standard symbol for division.",
  "02_57": "Arithmetic operators are +, -, *, /, %, used for mathematical calculations on numbers.",
  "02_58": "The modulus operator (%) gives you the remainder after division. For example, 10 % 3 is 1.",
  "02_59": "You use the Scanner class to get input from the user in Java. Other options aren't standard or don't work this way.",
  "02_60": "Constants store values that shouldn't be changed during a program's execution, which helps avoid accidental modifications.",
  "02_61": "Java's primitive types are int, float, double, boolean, char, short, long, and byte. They're the building blocks for all other data.",
  "02_62": "The correct way to declare a constant is using 'final' and specifying the type and value at once, e.g., final int x = 10;",
  "02_63": "A valid variable declaration in Java includes the type first, followed by the name and optional initialization. Other options are not syntactically correct.",
  "02_64": "The default value for a float variable in Java is 0.0, representing zero in decimal form.",
  "02_65": "The String class represents sequences of characters. It's not a primitive type, but it is used to store text.",
  "02_66": "To create an array of integers, use int[] arr = new int[5];. The syntax tells Java to allocate memory for five integers.",
  "02_67": "Multiplication happens before addition due to order of operations, so 3*2=6, then 5+6=11.",
  "02_68": "The == operator compares primitive values directly, but compares object references for non-primitives.",
  "02_69": "'A' is 65 in ASCII, so 'A' + 1 is 65 + 1, which equals 66.",
  "02_70": "To create a new Scanner object for reading input, use 'new Scanner(System.in)'. This sets up the object to read from the keyboard.",
  "02_71": "10 % 3 is 1, because 10 divided by 3 is 3 with a remainder of 1.",
  "02_72": "The correct way to declare a method includes the access modifier, return type, method name, and parentheses, e.g., public void methodName() {}",
  "02_73": "The standard for loop syntax in Java is for (int i = 0; i < 10; i++) {}, which covers initialization, condition, and increment.",
  "02_74": "// creates a single-line comment in Java. /* ... */ is also a valid multi-line comment, but only // is listed as correct here.",
  "02_75": "Both float and double are used for decimal (floating point) values in Java. Other types do not store decimals.",
  "02_76": "The default value of a boolean variable in Java is false, to ensure logical conditions are never accidentally true.",
  "02_77": "5 + 2 is calculated first (7), then \"Hello\" is concatenated, resulting in '7Hello'.",
  "02_78": "\"Hello\" + 3 + 2 is evaluated left-to-right. First, \"Hello\" + 3 gives \"Hello3\", then \"Hello3\" + 2 gives \"Hello32\".",
  "02_79": "\"Java\".charAt(2) returns the character at index 2, which is 'v' (indices start at 0: J=0, a=1, v=2, a=3).",
  "02_80": "In Java, single characters are stored using the char type and are enclosed in single quotes. So 'char initial = 'A';' is correct. Using double quotes is for strings, and 'int' or 'String' types are not appropriate for a single character.",
  "02_81": "If you try to use a variable in Java before assigning it a value, the compiler will produce an error. Java does not allow the use of uninitialized local variables to prevent unpredictable behavior.",
  "02_82": "A double literal in Java is simply a number with a decimal point, like 4.5. Using quotes makes it a character or string literal, and using a comma instead of a period is invalid in Java.",
  "02_83": "The 'boolean' data type in Java is specifically meant to store true or false values, which are commonly used for conditions and logic.",
  "02_84": "The '\\n' escape character represents a newline in Java. When included in a string, it causes any following text to appear on the next line when printed.",
  "02_85": "'totalScore' is a valid identifier because it starts with a letter and contains only letters (and would also allow digits or underscores after the first character). Identifiers cannot start with a digit, contain hyphens, or use reserved words like 'class'."
}
