{
  "05_01": "The address bus carries the memory location from the CPU to memory or I/O devices, specifying where to read or write data.",
  "05_02": "The control bus transmits signals like read, write, and interrupt acknowledge, which coordinate CPU operations.",
  "05_03": "Data bus moves actual data; address bus specifies memory locations; control bus carries control/timing signals. Power bus is not part of the standard bus trio.",
  "05_04": "Bus width is the number of bits a bus can transmit in parallel, directly affecting data transfer capacity per cycle.",
  "05_05": "Wider buses can transfer more bits in the same clock cycle, increasing throughput.",
  "05_06": "Round-robin arbitration gives each device a turn in a fixed, repeating order to ensure fairness.",
  "05_07": "Centralized arbitration uses a single controller (often the CPU) to decide which device can use the bus.",
  "05_08": "In distributed arbitration, devices negotiate bus access among themselves without a central authority.",
  "05_09": "The ready signal tells the CPU or device that it can proceed with the transfer.",
  "05_10": "Synchronous buses use a common clock to coordinate operations at fixed intervals; they're usually faster but less adaptable.",
  "05_11": "Asynchronous buses do not use a shared clock; instead, devices coordinate using handshaking signals.",
  "05_12": "Request/acknowledge handshakes ensure both sender and receiver agree on data transfer timing in asynchronous buses.",
  "05_13": "Serial buses transmit one bit at a time over a single line, reducing wiring complexity.",
  "05_14": "Parallel buses send multiple bits simultaneously on separate lines, allowing higher data rates over short distances.",
  "05_15": "PCI Express is serial, not parallel â€” it uses multiple high-speed serial lanes for data transfer.",
  "05_16": "Interrupts can be triggered by hardware, exceptions, timers, or user actions like pressing a key.",
  "05_17": "Hardware interrupts originate from external devices like keyboards or printers.",
  "05_18": "Software interrupts are generated by executing specific instructions in software.",
  "05_19": "Non-maskable interrupts cannot be disabled and are reserved for critical events like hardware failures.",
  "05_20": "Interrupt latency measures the delay between the interrupt request and the start of its service routine.",
  "05_21": "Interrupt handling involves saving CPU state, identifying the source, executing the ISR, and restoring state.",
  "05_22": "Polling checks each device in turn for requests, which can be inefficient.",
  "05_23": "Vectored interrupts provide the ISR address directly, reducing lookup time.",
  "05_24": "Priority interrupts let the CPU respond to more urgent events before less urgent ones.",
  "05_25": "An interrupt controller manages multiple requests and can assign priorities.",
  "05_26": "Maskable interrupts can be disabled by the CPU to avoid interruptions during critical code sections.",
  "05_27": "DMA allows direct transfers between devices and memory, reducing CPU load and supporting both reads and writes.",
  "05_28": "An acknowledge signal indicates that the DMA transfer has completed successfully.",
  "05_29": "In cycle stealing, the DMA takes control of the bus briefly to transfer data without CPU intervention.",
  "05_30": "Overlapped timing starts the next cycle before the current one finishes to improve throughput.",
  "05_31": "Synchronous timing sequences are governed by a common clock signal.",
  "05_32": "Asynchronous timing relies on request/acknowledge handshakes instead of a clock.",
  "05_33": "Control bus signals include memory read/write commands and clock pulses.",
  "05_34": "The number of address lines determines how many unique memory addresses the CPU can access.",
  "05_35": "A multiplexed bus shares the same lines for addresses and data, sending them at different times.",
  "05_36": "Unidirectional buses only allow data flow in one direction.",
  "05_37": "Half-duplex buses can send in both directions, but only one at a time.",
  "05_38": "Full-duplex buses allow simultaneous two-way communication.",
  "05_39": "Multiplexed buses reduce the number of lines and lower cost, but cannot send address and data at the same time.",
  "05_40": "Bus contention happens when multiple devices try to use the bus simultaneously.",
  "05_41": "Fixed priority arbitration assigns permanent priority levels to devices.",
  "05_42": "In a daisy chain, the closest device to the controller has the highest priority.",
  "05_43": "Bus segmentation splits the bus into parts to reduce contention and improve performance.",
  "05_44": "Vectored interrupts are faster than polling because they directly access the ISR address.",
  "05_45": "Polling wastes CPU time, increases overhead, and responds more slowly than interrupts.",
  "05_46": "Interrupt-driven I/O uses CPU time more efficiently by only acting when needed.",
  "05_47": "Differential buses use pairs of wires for each signal to reduce noise and improve speed.",
  "05_48": "USB is based on serial communication, sending one bit at a time.",
  "05_49": "Asynchronous buses don't require a shared clock, making them more flexible in mixed-speed systems.",
  "05_50": "Interrupt nesting lets higher-priority interrupts preempt lower-priority ISRs.",
  "05_51": "The read signal initiates data retrieval from memory or an I/O device.",
  "05_52": "Multiplexed buses share lines for address and data, using different time slots.",
  "05_53": "Hardware interrupts can include events like a printer out-of-paper signal.",
  "05_54": "Maskable interrupts include routine events like keyboard or printer signals, which can be disabled by the CPU.",
  "05_55": "Serial buses use a single channel for bidirectional communication between devices.",
  "05_56": "The interrupt vector table stores ISR addresses for quick access.",
  "05_57": "Dynamic priority arbitration adjusts priorities on the fly based on device needs.",
  "05_58": "Bus cycle time is the total time for one read/write transaction.",
  "05_59": "Software interrupts occur when a program executes a special interrupt instruction.",
  "05_60": "Vectored interrupts use an interrupt vector table to quickly find the ISR, and work with both hardware and software."
}
